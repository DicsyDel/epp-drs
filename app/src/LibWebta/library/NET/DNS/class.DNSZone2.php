<?
    /**
     * This file is a part of LibWebta, PHP class library.
     *
     * LICENSE
     *
     * This program is protected by international copyright laws. Any           
	 * use of this program is subject to the terms of the license               
	 * agreement included as part of this distribution archive.                 
	 * Any other uses are strictly prohibited without the written permission    
	 * of "Webta" and all other rights are reserved.                            
	 * This notice may not be removed from this source code file.               
	 * This source file is subject to version 1.1 of the license,               
	 * that is bundled with this package in the file LICENSE.                   
	 * If the backage does not contain LICENSE file, this source file is   
	 * subject to general license, available at http://webta.net/license.html
     *
     * @category   LibWebta
     * @package    NET
     * @subpackage DNS
     * @copyright  Copyright (c) 2003-2009 Webta Inc, http://webta.net/copyright.html
     * @license    http://webta.net/license.html
     */
	
	
	Core::load("NET/DNS/AbstractDNSZone");	
	
	/**
     * @name       DNSZone
     * @category   LibWebta
     * @package    NET
     * @subpackage DNS
     * @version 1.0
     * @author Alex Kovalyov <http://webta.net/company.html>
     */
	class DNSZone extends Core
	{
		
		/**
		* Zone content
		* @var string
		* @access public
		*/
		public $Content;
		
		/**
		 * Zone records
		 *
		 * @var array Array of DNSRecord
		 */
		public $Records;
		
		/**
		 * MX Preferences
		 *
		 * @var array
		 */
		private $MXPrefs;
		
		/**
		 * TTL
		 *
		 * @var string
		 */
		public $TTL;
		
		/**
		 * SOA Exists
		 *
		 * @var bool
		 */
		private $SOAExists;
		
		/**
		 * Records Sort map
		 *
		 * @var array
		 */
		public $RecordsSortMap;
		
		/**
		 * Reference to SOA DNS Record
		 *
		 * @var SOADNSRecord
		 */
		public $SOA;
		
		/**
		 * Template
		 *
		 * @var string
		 */
		public $Template;
		
		const DEFAULT_TEMPLATE = "; !Automatically generated by LibWebta (www.webta.net) - do not edit!
; Zone file for {name}
\$ORIGIN {name}
{ttl}";
				
		function __construct()
		{
			$this->TTL = false;
			$this->RecordsSortMap = array("SOA", "NS", "PTR", "A", "CNAME", "MX");
			$this->Template = self::DEFAULT_TEMPLATE;
		}
		
		public function SetTemplate($template)
		{
			$this->Template = $template;
		}
			
		/**
		* Add a record
		* @access public
		* @param DNSRecord $record DNSRecord or derived object
		* @return void
		*/ 
		public function AddRecord($record)
		{
			if ($record instanceof SOADNSRecord)
				if (!$this->SOAExists)
				{
					$this->Records[] = $record;
					$this->SOA = &$this->Records[count($this->Records)-1];
					$this->SOAExists = true;
				}
				else 
					Core::RaiseWarning(_("SOA record already defined"));
			else
				$this->Records[] = $record;
		}
		
		
		/**
		* Generate a text zone file
		* @access public
		* @return string Zone file content
		*/ 
		function __toString()
		{
			$this->Content = $this->Template;
			
			if (count($this->Records) == 0)
			{
			    Core::RaiseWarning(_("No records found"));
			    return "";
			}
			
			foreach ($this->RecordsSortMap as $RecordType)
			{
				foreach((array)$this->Records as $Record)
				{
					$classname = "{$RecordType}DNSRecord";
					if ($Record instanceof $classname)
					{						
						// Set TTL
						if ($this->TTL && !$Record->TTL)
							$Record->TTL = "";
						elseif (!$Record->TTL && $RecordType != "SOA")
							$Record->TTL = $Record->DefaultTTL;
									
						// Raise Preference for MX record			
						if ($RecordType == "MX")
							$Record->Pref = $this->RaiseMXPref($Record->Pref);

						if ($RecordType == "SOA")
							$soa = $Record;
												
						$this->Content .= $Record->__toString()."\n";
					}						
				}
			}
			
			$tags = array("{name}" => $soa->Name);
			if ($this->TTL)
				$tags["{ttl}"] = '$TTL '.$this->TTL;
			else 
				$tags["{ttl}"] = "";
			
			$this->Content = str_replace(
					array_keys($tags),
					array_values($tags),
					$this->Content
				);
				
			return $this->Content;	
		}		
		
		/**
		* Raise MX pref on 10
		*
		* @param string $pref Preferences
		* @return string Reversed IP
		* @access protected
		*/
		protected function RaiseMXPref($pref)
		{
			$pref = (int)$pref;
			
			// Increase forcefully in case if this pref already assigned
			// to another MX record or pref is not set (default)
			if (count($this->MXPrefs))
			{
				if (in_array($pref, $this->MXPrefs) || !$pref)
					$retval = max($this->MXPrefs) + 10;
				else
					$retval = $pref;
			}
			else
				$retval = $pref;
				
			// Add this new pref to stack
			$this->MXPrefs[] = $retval;
			return($retval);
		}
		
	}
	
?>
